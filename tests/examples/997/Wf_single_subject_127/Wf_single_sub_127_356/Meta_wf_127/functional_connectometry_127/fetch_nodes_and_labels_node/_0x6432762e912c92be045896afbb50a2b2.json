[
    [
        "atlas_select",
        "atlas_aal"
    ],
    [
        "function_str",
        "def fetch_nodes_and_labels(atlas_select, uatlas_select, ref_txt, parc, in_file, use_AAL_naming, clustering=False):\n    from pynets import utils, nodemaker\n    import pandas as pd\n    import time\n    from pathlib import Path\n    import os.path as op\n\n    base_path = utils.get_file()\n    # Test if atlas_select is a nilearn atlas. If so, fetch coords, labels, and/or networks.\n    nilearn_parc_atlases = ['atlas_harvard_oxford', 'atlas_aal', 'atlas_destrieux_2009',\n                            'atlas_talairach_gyrus', 'atlas_talairach_ba', 'atlas_talairach_lobe']\n    nilearn_coords_atlases = ['coords_power_2011', 'coords_dosenbach_2010']\n    nilearn_prob_atlases = ['atlas_msdl', 'atlas_pauli_2017']\n    if uatlas_select is None and atlas_select in nilearn_parc_atlases:\n        [label_names, networks_list, uatlas_select] = nodemaker.nilearn_atlas_helper(atlas_select, parc)\n        if uatlas_select:\n            if not isinstance(uatlas_select, str):\n                nib.save(uatlas_select, \"%s%s%s\" % ('/tmp/', atlas_select, '.nii.gz'))\n                uatlas_select = \"%s%s%s\" % ('/tmp/', atlas_select, '.nii.gz')\n            [coords, _, par_max] = nodemaker.get_names_and_coords_of_parcels(uatlas_select)\n            if parc is True:\n                parcel_list = nodemaker.gen_img_list(uatlas_select)\n            else:\n                parcel_list = None\n        else:\n            raise ValueError(\"%s%s%s\" % ('\\nERROR: Atlas file for ', atlas_select, ' not found!'))\n    elif uatlas_select is None and parc is False and atlas_select in nilearn_coords_atlases:\n        print('Fetching coords and labels from nilearn coordsinate-based atlas library...')\n        # Fetch nilearn atlas coords\n        [coords, _, networks_list, label_names] = nodemaker.fetch_nilearn_atlas_coords(atlas_select)\n        parcel_list = None\n        par_max = None\n    elif uatlas_select is None and parc is False and atlas_select in nilearn_prob_atlases:\n        from nilearn.plotting import find_probabilistic_atlas_cut_coords\n        print('Fetching coords and labels from nilearn probabilistic atlas library...')\n        # Fetch nilearn atlas coords\n        [label_names, networks_list, uatlas_select] = nodemaker.nilearn_atlas_helper(atlas_select, parc)\n        coords = find_probabilistic_atlas_cut_coords(maps_img=uatlas_select)\n        if uatlas_select:\n            if not isinstance(uatlas_select, str):\n                nib.save(uatlas_select, \"%s%s%s\" % ('/tmp/', atlas_select, '.nii.gz'))\n                uatlas_select = \"%s%s%s\" % ('/tmp/', atlas_select, '.nii.gz')\n            if parc is True:\n                parcel_list = nodemaker.gen_img_list(uatlas_select)\n            else:\n                parcel_list = None\n        else:\n            raise ValueError(\"%s%s%s\" % ('\\nERROR: Atlas file for ', atlas_select, ' not found!'))\n        par_max = None\n    elif uatlas_select:\n        if clustering is True:\n            while True:\n                if op.isfile(uatlas_select):\n                    break\n                else:\n                    print('Waiting for atlas file...')\n                    time.sleep(15)\n        atlas_select = uatlas_select.split('/')[-1].split('.')[0]\n        try:\n            # Fetch user-specified atlas coords\n            [coords, atlas_select, par_max] = nodemaker.get_names_and_coords_of_parcels(uatlas_select)\n            if parc is True:\n                parcel_list = nodemaker.gen_img_list(uatlas_select)\n            else:\n                parcel_list = None\n            # Describe user atlas coords\n            print(\"%s%s%s%s\" % ('\\n', atlas_select, ' comes with {0} '.format(par_max), 'parcels\\n'))\n        except ValueError:\n            print('\\n\\nError: Either you have specified the name of a nilearn atlas that does not exist or you have not '\n                  'supplied a 3d atlas parcellation image!\\n\\n')\n            parcel_list = None\n            par_max = None\n            coords = None\n        label_names = None\n        networks_list = None\n    else:\n        networks_list = None\n        label_names = None\n        parcel_list = None\n        par_max = None\n        coords = None\n\n    # Labels prep\n    if atlas_select:\n        if label_names:\n            pass\n        else:\n            if ref_txt is not None and op.exists(ref_txt):\n                dict_df = pd.read_csv(ref_txt, sep=\" \", header=None, names=[\"Index\", \"Region\"])\n                label_names = dict_df['Region'].tolist()\n            else:\n                try:\n                    ref_txt = \"%s%s%s%s\" % (str(Path(base_path).parent), '/labelcharts/', atlas_select, '.txt')\n                    if op.exists(ref_txt):\n                        try:\n                            dict_df = pd.read_csv(ref_txt, sep=\"\\t\", header=None, names=[\"Index\", \"Region\"])\n                            label_names = dict_df['Region'].tolist()\n                            #print(label_names)\n                        except:\n                            print(\"WARNING: label names from label reference file failed to populate or are invalid. \"\n                                  \"Attempting AAL naming...\")\n                            try:\n                                label_names = nodemaker.AAL_naming(coords)\n                                # print(label_names)\n                            except:\n                                print('AAL reference labeling failed!')\n                                label_names = np.arange(len(coords) + 1)[np.arange(len(coords) + 1) != 0].tolist()\n                    else:\n                        if use_AAL_naming is True:\n                            try:\n                                label_names = nodemaker.AAL_naming(coords)\n                                # print(label_names)\n                            except:\n                                print('AAL reference labeling failed!')\n                                label_names = np.arange(len(coords) + 1)[np.arange(len(coords) + 1) != 0].tolist()\n                        else:\n                            print('Using generic numbering labels...')\n                            label_names = np.arange(len(coords) + 1)[np.arange(len(coords) + 1) != 0].tolist()\n                except:\n                    print(\"Label reference file not found. Attempting AAL naming...\")\n                    if use_AAL_naming is True:\n                        try:\n                            label_names = nodemaker.AAL_naming(coords)\n                            #print(label_names)\n                        except:\n                            print('AAL reference labeling failed!')\n                            label_names = np.arange(len(coords) + 1)[np.arange(len(coords) + 1) != 0].tolist()\n                    else:\n                        print('Using generic numbering labels...')\n                        label_names = np.arange(len(coords) + 1)[np.arange(len(coords) + 1) != 0].tolist()\n    else:\n        print('WARNING: No labels available since atlas name is not specified!')\n\n    print(\"%s%s\" % ('Labels:\\n', label_names))\n    atlas_name = atlas_select\n    dir_path = utils.do_dir_path(atlas_select, in_file)\n\n    return label_names, coords, atlas_name, networks_list, parcel_list, par_max, uatlas_select, dir_path\n"
    ],
    [
        "in_file",
        [
            "/Users/derekpisner/Applications/PyNets/tests/examples/997/sub-997_ses-01_task-REST_run-01_bold_space-MNI152NLin2009cAsym_preproc_masked.nii.gz",
            "2ef04a5d281bc26fbd41af3f36b65cb0"
        ]
    ],
    [
        "parc",
        false
    ],
    [
        "ref_txt",
        null
    ],
    [
        "uatlas_select",
        null
    ],
    [
        "use_AAL_naming",
        false
    ]
]
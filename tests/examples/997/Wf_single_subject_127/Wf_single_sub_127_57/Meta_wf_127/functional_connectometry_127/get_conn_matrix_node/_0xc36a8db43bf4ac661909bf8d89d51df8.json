[('ID', '127'), ('atlas_select', 'atlas_aal'), ('binary', False), ('c_boot', 0), ('conn_model', 'sps'), ('coords', [('-8.3201856148', '-26.7873163186', '69.0208816705'), ('7.1267942584', '-32.9425837321', '66.7918660287'), ('-25.2553648069', '-21.9635193133', '-11.3841201717'), ('28.9450317125', '-20.9915433404', '-11.5771670190'), ('-45.8900751285', '28.6666666667', '12.5828390668'), ('50.0613668061', '28.9019060902', '12.8172942817'), ('-55.8688789964', '-34.9842169162', '-3.5847834885'), ('57.1599002041', '-38.5656611477', '-2.7752324790'), ('-21.4928425358', '-17.2924335378', '-21.9182004090'), ('25.1484098940', '-16.3003533569', '-21.7438162544'), ('-36.2402366864', '29.4923076923', '-13.4591715976'), ('40.9103690685', '30.9947275923', '-13.2583479789'), ('-36.6026666667', '13.3546666667', '-35.4053333333'), ('43.9814189189', '13.2753378378', '-33.5540540541'), ('-31.3951473137', '-41.3622183709', '-21.6152512998'), ('33.6637519873', '-40.1605723370', '-21.5468998410'), ('-47.3785425101', '-9.7510121457', '12.6356275304'), ('52.3816679189', '-7.5371900826', '13.3298271976'), ('-6.8174061433', '48.2269624573', '28.8054607509'), ('8.7507029053', '49.5285848172', '28.9268978444'), ('-35.3853246254', '-67.9431425279', '-30.2627737226'), ('38.2145015106', '-68.3716012085', '-30.8496978852'), ('-6.5273631841', '52.2553897181', '-8.7628524046'), ('7.8341121495', '50.4065420561', '-8.5163551402'), ('-18.7977715877', '33.4178272981', '40.9944289694'), ('21.6048347311', '29.9097187963', '42.5130735076'), ('-28.5678610206', '-74.3713355049', '-39.6905537459'), ('32.6735947095', '-70.3967879074', '-41.2017005196'), ('-43.1066612178', '-47.0192071925', '45.4229668982'), ('46.2914498141', '-47.5881040892', '48.1918215613'), ('-8.1176470588', '-38.3676470588', '-19.7794117647'), ('13.0628019324', '-35.7101449275', '-20.5990338164'), ('-16.8245067497', '45.9190031153', '-14.7185877466'), ('18.1785356068', '46.6178535607', '-15.4944834504'), ('-56.1464968153', '-34.9363057325', '29.1194267516'), ('57.2711606690', '-32.8220983274', '33.1322858591'), ('-14.3431111111', '-44.6631111111', '-18.2613333333'), ('17.8885017422', '-44.1649245064', '-19.3542392567'), ('-44.4249146758', '-62.0853242321', '34.2781569966'), ('45.2283105023', '-61.2385844749', '37.3150684932'), ('-32.6392889979', '-81.9938706712', '14.7888446215'), ('37.1064439141', '-81.0014319809', '18.0954653938'), ('-22.5253837072', '-60.2585596222', '-23.4805194805'), ('25.4295264624', '-59.5376044568', '-24.9403899721'), ('-11.7671517672', '9.7234927235', '8.0706860707'), ('14.4949698189', '10.7766599598', '8.1488933602'), ('-31.5856164384', '-61.0787671233', '-46.7636986301'), ('33.9288389513', '-64.4082397004', '-49.7602996255'), ('-6.8097345133', '3.1294247788', '60.5353982301'), ('8.2463095740', '-1.0932096162', '60.5128637706'), ('-24.2081268583', '2.6005946482', '1.0703666997'), ('27.4849624060', '3.6785714286', '1.1936090226'), ('-25.0291467939', '-55.7710651828', '-49.0545839958'), ('25.7729636049', '-57.6308492201', '-50.7980935875'), ('-23.5090909091', '-1.9454545455', '-18.4545454545'), ('27.0564516129', '-0.5725806452', '-18.8064516129'), ('-50.0362500000', '-29.2918750000', '-24.5193750000'), ('53.3715893108', '-32.1344585091', '-23.7378340366'), ('-18.0614334471', '-1.3583617747', '-1.0443686007'), ('20.9214285714', '-1.0571428571', '-1.0857142857'), ('-10.3244495944', '-50.1622247972', '-47.2514484357'), ('10.1903584672', '-50.7515451174', '-47.6242274413'), ('-42.9044193217', '-23.7754367934', '47.4568345324'), ('41.1582526811', '-26.7726916035', '51.2539890139'), ('-21.7916666667', '-35.0000000000', '-43.0694444444'), ('26.8050314465', '-35.0188679245', '-42.6415094340'), ('-10.0566572238', '-77.5490084986', '5.4730878187'), ('15.7098334229', '-74.4492208490', '8.0193444385'), ('-2.3636363636', '-40.9090909091', '-21.8181818182'), ('-6.6961483595', '35.0499286733', '-19.2924393723'), ('8.0026845638', '34.4510067114', '-19.4362416107'), ('-8.3983122363', '-80.5434599156', '26.1721518987'), ('13.1228813559', '-80.7062146893', '26.8714689266'), ('-2.0000000000', '-41.2820512821', '-13.3333333333'), ('-33.7601316602', '31.4976342316', '34.1283686484'), ('37.3950205842', '31.7714173691', '32.8018035679'), ('-8.4862819300', '-56.9019236834', '47.1321349732'), ('9.6844362745', '-57.3118872549', '42.3651960784'), ('-15.3592902908', '-68.6742237555', '-6.2740266141'), ('16.0773913043', '-68.1417391304', '-5.2156521739'), ('-2.2251655629', '-53.4569536424', '-7.6158940397'), ('-5.8247903075', '34.4659832246', '12.0652376514'), ('-30.8851351351', '49.1418918919', '-10.9864864865'), ('32.8945812808', '51.2748768473', '-12.1418719212'), ('8.1172886519', '35.7227722772', '14.4325971059'), ('-42.3466666667', '-20.0355555556', '8.6755555556'), ('45.7004048583', '-18.3157894737', '9.0850202429'), ('-2.2409638554', '-68.2409638554', '-16.1686746988'), ('-6.9975550122', '-16.5855745721', '40.2628361858'), ('7.6640944167', '-10.1970040853', '38.4375851112'), ('-53.4355400697', '-22.0095818815', '5.8405923345'), ('57.8325374085', '-23.0105062082', '5.4186564788'), ('-2.4736842105', '-71.6315789474', '-26.8421052632'), ('-36.4824654623', '-79.5685441020', '-9.1647183847'), ('37.8705763397', '-83.1911021234', '-8.9929221436'), ('-6.1882951654', '-44.1679389313', '22.4631043257'), ('7.1411411411', '-43.0930930931', '20.5165165165'), ('-35.4101184069', '5.4402583423', '2.1722282024'), ('38.7213114754', '5.0276992651', '0.8015828151'), ('-40.1540856031', '13.8677042802', '-21.4365758755'), ('47.9372197309', '13.4573991031', '-18.1898355755'), ('-11.3009174312', '-18.8697247706', '6.6036697248'), ('12.7038789026', '-18.7682119205', '6.7284768212'), ('-2.1568627451', '-65.1372549020', '-34.9411764706'), ('-8.9000000000', '13.9307692308', '-13.0076923077'), ('10.1245674740', '14.6643598616', '-12.5605536332'), ('-2.6315789474', '-56.8947368421', '-35.3157894737'), ('-38.9282269504', '-6.9600000000', '49.6465248227'), ('41.1008577344', '-9.5498373262', '50.8098195800'), ('-2.6428571429', '-46.8571428571', '-33.0000000000'), ('-23.7199612403', '-60.7994186047', '57.6637596899'), ('25.8388113462', '-60.4367402071', '60.7194957226'), ('-16.7569546120', '-85.6105417277', '26.8535871157'), ('23.9631728045', '-82.2039660057', '29.2847025496'), ('-48.7957610790', '11.4913294798', '17.8015414258'), ('49.9270907791', '13.6754824875', '20.1958541816')]), ('dens_thresh', False), ('dir_path', '/Users/derekpisner/Applications/PyNets/tests/examples/997/atlas_aal'), ('disp_filt', False), ('function_str', 'def get_conn_matrix(time_series, conn_model, dir_path, node_size, smooth, dens_thresh, network, ID, roi, min_span_tree,\n                    disp_filt, parc, prune, atlas_select, uatlas_select, label_names, coords, c_boot, norm, binary):\n    from nilearn.connectome import ConnectivityMeasure\n    from sklearn.covariance import GraphicalLassoCV\n\n    conn_matrix = None\n    if conn_model == \'corr\' or conn_model == \'cor\' or conn_model == \'correlation\':\n        # credit: nilearn\n        print(\'\\nComputing correlation matrix...\\n\')\n        conn_measure = ConnectivityMeasure(kind=\'correlation\')\n        conn_matrix = conn_measure.fit_transform([time_series])[0]\n    elif conn_model == \'partcorr\' or conn_model == \'parcorr\' or conn_model == \'partialcorrelation\':\n        # credit: nilearn\n        print(\'\\nComputing partial correlation matrix...\\n\')\n        conn_measure = ConnectivityMeasure(kind=\'partial correlation\')\n        conn_matrix = conn_measure.fit_transform([time_series])[0]\n    elif conn_model == \'cov\' or conn_model == \'covariance\' or conn_model == \'covar\' or conn_model == \'sps\' or conn_model == \'sparse\' or conn_model == \'precision\':\n        # Fit estimator to matrix to get sparse matrix\n        estimator_shrunk = None\n        estimator = GraphicalLassoCV(cv=5)\n        try:\n            print(\'\\nComputing covariance...\\n\')\n            estimator.fit(time_series)\n        except:\n            print(\'Unstable Lasso estimation--Attempting to re-run by first applying shrinkage...\')\n            try:\n                from sklearn.covariance import GraphicalLasso, empirical_covariance, shrunk_covariance\n                emp_cov = empirical_covariance(time_series)\n                for i in np.arange(0.8, 0.99, 0.01):\n                    shrunk_cov = shrunk_covariance(emp_cov, shrinkage=i)\n                    alphaRange = 10.0 ** np.arange(-8, 0)\n                    for alpha in alphaRange:\n                        try:\n                            estimator_shrunk = GraphicalLasso(alpha)\n                            estimator_shrunk.fit(shrunk_cov)\n                            print("Retrying covariance matrix estimate with alpha=%s" % alpha)\n                            if estimator_shrunk is None:\n                                pass\n                            else:\n                                break\n                        except:\n                            print("Covariance estimation failed with shrinkage at alpha=%s" % alpha)\n                            continue\n            except ValueError:\n                print(\'Unstable Lasso estimation! Shrinkage failed. A different connectivity model may be needed.\')\n        if estimator is None and estimator_shrunk is None:\n            raise RuntimeError(\'\\nERROR: Covariance estimation failed.\')\n        if conn_model == \'sps\' or conn_model == \'sparse\' or conn_model == \'precision\':\n            if estimator_shrunk is None:\n                print(\'\\nFetching precision matrix from covariance estimator...\\n\')\n                conn_matrix = -estimator.precision_\n            else:\n                print(\'\\nFetching shrunk precision matrix from covariance estimator...\\n\')\n                conn_matrix = -estimator_shrunk.precision_\n        elif conn_model == \'cov\' or conn_model == \'covariance\' or conn_model == \'covar\':\n            if estimator_shrunk is None:\n                print(\'\\nFetching covariance matrix from covariance estimator...\\n\')\n                conn_matrix = estimator.covariance_\n            else:\n                conn_matrix = estimator_shrunk.covariance_\n    elif conn_model == \'QuicGraphicalLasso\':\n        try:\n            from inverse_covariance import QuicGraphicalLasso\n        except ImportError:\n            print(\'Cannot run QuicGraphLasso. Skggm not installed!\')\n\n        # Compute the sparse inverse covariance via QuicGraphLasso\n        # credit: skggm\n        model = QuicGraphicalLasso(\n            init_method=\'cov\',\n            lam=0.5,\n            mode=\'default\',\n            verbose=1)\n        print(\'\\nCalculating QuicGraphLasso precision matrix using skggm...\\n\')\n        model.fit(time_series)\n        conn_matrix = -model.precision_\n    elif conn_model == \'QuicGraphLassoCV\':\n        try:\n            from inverse_covariance import QuicGraphicalLassoCV\n        except ImportError:\n            print(\'Cannot run QuicGraphLassoCV. Skggm not installed!\')\n\n        # Compute the sparse inverse covariance via QuicGraphLassoCV\n        # credit: skggm\n        model = QuicGraphicalLassoCV(\n            init_method=\'cov\',\n            verbose=1)\n        print(\'\\nCalculating QuicGraphLassoCV precision matrix using skggm...\\n\')\n        model.fit(time_series)\n        conn_matrix = -model.precision_\n    elif conn_model == \'QuicGraphicalLassoEBIC\':\n        try:\n            from inverse_covariance import QuicGraphicalLassoEBIC\n        except ImportError:\n            print(\'Cannot run QuicGraphLassoEBIC. Skggm not installed!\')\n\n        # Compute the sparse inverse covariance via QuicGraphLassoEBIC\n        # credit: skggm\n        model = QuicGraphicalLassoEBIC(\n            init_method=\'cov\',\n            verbose=1)\n        print(\'\\nCalculating QuicGraphLassoEBIC precision matrix using skggm...\\n\')\n        model.fit(time_series)\n        conn_matrix = -model.precision_\n    elif conn_model == \'AdaptiveQuicGraphLasso\':\n        try:\n            from inverse_covariance import AdaptiveQuicGraphicalLasso, QuicGraphicalLassoEBIC\n        except ImportError:\n            print(\'Cannot run AdaptiveGraphLasso. Skggm not installed!\')\n\n        # Compute the sparse inverse covariance via\n        # AdaptiveGraphLasso + QuicGraphLassoEBIC + method=\'binary\'\n        # credit: skggm\n        model = AdaptiveQuicGraphicalLasso(\n                estimator=QuicGraphicalLassoEBIC(\n                    init_method=\'cov\',\n                ),\n                method=\'binary\',\n            )\n        print(\'\\nCalculating AdaptiveQuicGraphLasso precision matrix using skggm...\\n\')\n        model.fit(time_series)\n        conn_matrix = -model.estimator_.precision_\n    else:\n        raise ValueError(\'\\nERROR! No connectivity model specified at runtime. Select a valid estimator using the \'\n                         \'-mod flag.\')\n\n    if conn_matrix.shape < (2, 2):\n        raise RuntimeError(\'\\nERROR! Matrix estimation selection yielded an empty or 1-dimensional graph. \'\n                           \'Check time-series for errors or try using a different atlas\')\n\n    coords = np.array(coords)\n    label_names = np.array(label_names)\n    return conn_matrix, conn_model, dir_path, node_size, smooth, dens_thresh, network, ID, roi, min_span_tree, disp_filt, parc, prune, atlas_select, uatlas_select, label_names, coords, c_boot, norm, binary\n'), ('label_names', ['Precentral_L', 'Precentral_R', 'Frontal_Sup_L', 'Frontal_Sup_R', 'Frontal_Sup_Orb_L', 'Frontal_Sup_Orb_R', 'Frontal_Mid_L', 'Frontal_Mid_R', 'Frontal_Mid_Orb_L', 'Frontal_Mid_Orb_R', 'Frontal_Inf_Oper_L', 'Frontal_Inf_Oper_R', 'Frontal_Inf_Tri_L', 'Frontal_Inf_Tri_R', 'Frontal_Inf_Orb_L', 'Frontal_Inf_Orb_R', 'Rolandic_Oper_L', 'Rolandic_Oper_R', 'Supp_Motor_Area_L', 'Supp_Motor_Area_R', 'Olfactory_L', 'Olfactory_R', 'Frontal_Sup_Medial_L', 'Frontal_Sup_Medial_R', 'Frontal_Med_Orb_L', 'Frontal_Med_Orb_R', 'Rectus_L', 'Rectus_R', 'Insula_L', 'Insula_R', 'Cingulum_Ant_L', 'Cingulum_Ant_R', 'Cingulum_Mid_L', 'Cingulum_Mid_R', 'Cingulum_Post_L', 'Cingulum_Post_R', 'Hippocampus_L', 'Hippocampus_R', 'ParaHippocampal_L', 'ParaHippocampal_R', 'Amygdala_L', 'Amygdala_R', 'Calcarine_L', 'Calcarine_R', 'Cuneus_L', 'Cuneus_R', 'Lingual_L', 'Lingual_R', 'Occipital_Sup_L', 'Occipital_Sup_R', 'Occipital_Mid_L', 'Occipital_Mid_R', 'Occipital_Inf_L', 'Occipital_Inf_R', 'Fusiform_L', 'Fusiform_R', 'Postcentral_L', 'Postcentral_R', 'Parietal_Sup_L', 'Parietal_Sup_R', 'Parietal_Inf_L', 'Parietal_Inf_R', 'SupraMarginal_L', 'SupraMarginal_R', 'Angular_L', 'Angular_R', 'Precuneus_L', 'Precuneus_R', 'Paracentral_Lobule_L', 'Paracentral_Lobule_R', 'Caudate_L', 'Caudate_R', 'Putamen_L', 'Putamen_R', 'Pallidum_L', 'Pallidum_R', 'Thalamus_L', 'Thalamus_R', 'Heschl_L', 'Heschl_R', 'Temporal_Sup_L', 'Temporal_Sup_R', 'Temporal_Pole_Sup_L', 'Temporal_Pole_Sup_R', 'Temporal_Mid_L', 'Temporal_Mid_R', 'Temporal_Pole_Mid_L', 'Temporal_Pole_Mid_R', 'Temporal_Inf_L', 'Temporal_Inf_R', 'Cerebelum_Crus1_L', 'Cerebelum_Crus1_R', 'Cerebelum_Crus2_L', 'Cerebelum_Crus2_R', 'Cerebelum_3_L', 'Cerebelum_3_R', 'Cerebelum_4_5_L', 'Cerebelum_4_5_R', 'Cerebelum_6_L', 'Cerebelum_6_R', 'Cerebelum_7b_L', 'Cerebelum_7b_R', 'Cerebelum_8_L', 'Cerebelum_8_R', 'Cerebelum_9_L', 'Cerebelum_9_R', 'Cerebelum_10_L', 'Cerebelum_10_R', 'Vermis_1_2', 'Vermis_3', 'Vermis_4_5', 'Vermis_6', 'Vermis_7', 'Vermis_8', 'Vermis_9', 'Vermis_10']), ('min_span_tree', False), ('network', None), ('node_size', '4'), ('norm', None), ('parc', False), ('prune', 1), ('roi', None), ('smooth', 0), ('time_series', array([[ 0.21271189, -0.9816183 , -2.0468237 , ...,  1.3065121 ,
         0.63518417,  0.3933397 ],
       [-0.48367202,  0.47279283,  0.1912865 , ..., -0.29603896,
         0.6095288 ,  0.9284861 ],
       [ 0.18839064, -0.9216517 , -0.8619707 , ..., -0.31567624,
        -1.2928486 ,  1.0017871 ],
       ...,
       [-0.10708141, -0.06490935, -0.66172117, ...,  0.34618643,
         0.63896394,  0.6177307 ],
       [ 0.36511347,  1.2283473 ,  1.1310766 , ..., -1.9178196 ,
         1.122112  ,  0.9148985 ],
       [ 2.0250428 , -0.83102155, -1.2572722 , ...,  0.36165065,
        -1.355625  ,  0.954857  ]], dtype=float32)), ('uatlas_select', ('/Users/derekpisner/nilearn_data/aal_SPM12/aal/atlas/AAL.nii', '257285354c389db76beb8c198b4d505d'))]